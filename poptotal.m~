function [g1_norm, g2_norm] = poptotal(B1,B2,a1max0,a2max0,T,tp1,tp1_params,tp2,tp2_params)
%B1 and B2 are the per capita rates of leaving a given stage.
%cells that leave the first stage enter the second stage.
%cells that leave the second stage, divide, and their daughters enter the
%first stage.

%tp_params1[m1,sigma1,B1];
%tp_params2[m2,sigma2,B2];

eps=.01;
a1max=a1max0+T;
a2max=a2max0+T;

Gaussian_density=@(a,mu,sigmasq)(1/(2*pi*sigmasq)^.5)*exp(-((a-mu).^2)/(2*sigmasq));

h=.01;

%ages at which we approximate the population density
ages1=0:h:a1max;
ages2=0:h:a2max;

% Set the initial populations
init_pop1=Gaussian_density(ages1,a1max/4, .1)*10^(-2);
init_pop1(a1max0+1:a1max)=0;
init_pop2=Gaussian_density(ages2,a2max/4, .1)*10^(-2);
init_pop2(a2max0+1:a2max)=0;

n1=length(ages1);
n2=length(ages2);

t=0:h:T;

m=length(t);

%population density in each class
g1=zeros(n1,m);
g2=zeros(n2,m);

%normalized population density in each class (if we integrate g1_norm over
%all ages we get 1.)
g1_norm=zeros(n1,m);
g2_norm=zeros(n2,m);

%total number in nonzero age class (the integral of g1 and g2 across all nonzero ages.)
G1=zeros(1,m);
G2=zeros(1,m);

g1(:,1)=init_pop1;
g2(:,1)=init_pop2;

G1(1)=h*sum(g1(1:n1,1));
G2(1)=h*sum(g2(1:n2,1));

g1_norm(:,1)=g1(:,1)/G1(1);
g2_norm(:,1)=g2(:,1)/G2(1);

sigsq = 5;

if strcmp(tp1,'Gaussian')==1
    % Transition probabilities have an age-dependency with Gaussian dist.
    m1=tp1_params(1);
    sigsq1=tp1_params(2)^2;
    B1=tp1_params(3);
    tp1=@(a)B1*Gaussian_density(a, m1, sigsq1);
end

if strcmp(tp2,'Gaussian')==1
    % Transition probabilities have an age-dependency with Gaussian dist.
    m2=tp2_params(1);
    sigsq2=tp2_params(2)^2;
    B2=tp2_params(3);
    tp2=@(a)B2*Gaussian_density(a, m2, sigsq2);
end

if strcmp(tp1,'Gaussian_plus_constant')==1
    m1=tp1_params(1);
    sigsq1=tp1_params(2)^2;
    B1=tp1_params(3);
    tp1=@(a)B1*Gaussian_density(a, m1, sigsq1) + B1;
end

if strcmp(tp2,'Gaussian_plus_constant')==1
m2=tp2_params(1);
sigsq2=tp2_params(2)^2;
B2=tp2_params(3);
tp2=@(a)B2*Gaussian_density(a, m2, sigsq2) + B2;
end


if strcmp(tp1,'constant')==1
m1=tp1_params(1);
tp1=@(a)m1*ones(size(a));
end

if strcmp(tp2,'constant')==1
m2=tp2_params(1);
tp2=@(a)m2*ones(size(a));
end

f1=@(a)tp1(a);
f2=@(a)tp2(a);

%j for time
%i1 and i2 for ages
for j=1:m-1
    
    %get population density at next time step for next age by integrating
    %one step along the characterisitc.
    for i1=1:n1-1
        g1(i1+1,j+1) = g1(i1,j) * exp( -Simp_Rule(f1, ages1(i1), ages1(i1+1), 2) );
    end
    
    for i2=1:n2-1
        g2(i2+1,j+1) = g2(i2,j) * exp( -Simp_Rule(f2, ages2(i2), ages2(i2+1), 2) );
    end
    
    %get density of individuals of age zero, by integrating across all ages.
    %here the integral is approximated as a right-hand Riemann sum.
    G1(j+1)=h*sum(g1(2:n1,j+1));
    G2(j+1)=h*sum(g2(2:n2,j+1));
    
    % At the end of G2, two new cells enter G1 (cell division)
    % g2 is the density in the second class at the ages2 vector
    % similarly g1
    g1(1,j+1)=2*h*sum( g2(2:n2,j+1)' .* f2(ages2(2:n2)) );
    g2(1,j+1)=  h*sum( g1(2:n1,j+1)' .* f1(ages1(2:n1)) );
    
    g1_norm(:,j+1) = g1(:,j+1) / (G1(j+1)+g1(1,j+1)*h);
    g2_norm(:,j+1) = g2(:,j+1) / (G2(j+1)+g2(1,j+1)*h);
    
end

poptotal = G1 + G2;
G1_Frac = G1 ./ poptotal;
G2_Frac = G2 ./ poptotal;

% Plot proportion of cells in each stage
plot(G1_Frac, 'Color', 'red')

hold on
plot(G2_Frac, 'Color', 'blue')

legend('G1', 'G2')
hold off

fracName = sprintf('Fractions_B1=%0.2f_B2=%0.2f_C1=%0.2f_C2=%0.2f_T=%d_tp=%d.fig', B1, B2, C1, C2, T, tp);

saveas(gcf, fracName)

% Surface plot for g1
s1 = surf(t,ages1,g1_norm);
axis([0 T 0 T])
s1.EdgeColor = 'interp';
    
p1name = sprintf('G1_B1=%0.2f_B2=%0.2f_C1=%0.2f_C2=%0.2f_T=%d_tp=%d.fig', B1, B2, C1, C2, T, tp);
    
saveas(gcf, p1name);

% Surface plot for g2
s2 = surf(t,ages2,g2_norm);
axis([0 T 0 T])
s2.EdgeColor = 'interp';
    
p2name = sprintf('G2_B1=%0.2f_B2=%0.2f_C1=%0.2f_C2=%0.2f_T=%d_tp=%d.fig', B1, B2, C1, C2, T, tp);
    
saveas(gcf, p2name);

 end
